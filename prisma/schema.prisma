// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TokenPlatform {
  TWITCH
  DISCORD
}

enum TokenType {
  authorization_code
  client_credentials
}

model State {
  id        Int      @id @default(autoincrement())
  value     String   @unique
  createdAt DateTime @default(now())
}

model Token {
  id Int @id @default(autoincrement())

  token        String    @unique
  type         TokenType
  refreshToken String?
  refreshed    DateTime  @default(now())
  expiresIn    DateTime

  BotToken BotToken[]
  Channel  Channel[]
  Guild    Guild[]
}

model BotToken {
  id Int @id @default(autoincrement())

  platform TokenPlatform @unique

  token   Token @relation(fields: [tokenId], references: [id])
  tokenId Int
}

model Channel {
  id Int @id @default(autoincrement())

  channelId    String    @unique
  channelLogin String    @unique
  channelName  String
  lastLive     DateTime?
  registered   DateTime  @default(now())
  enabled      Boolean   @default(true)

  token   Token @relation(fields: [tokenId], references: [id])
  tokenId Int

  guilds       Link[]
  quotes       Quote[]
  commands     Command[]
  Wallets      Wallet[]
  LoveCounters LoveCounter[]
  Suggestions  Suggestion[]
  Users        User[]
}

model Guild {
  id Int @id @default(autoincrement())

  guildId    String   @unique
  registered DateTime @default(now())
  enabled    Boolean  @default(true)

  token   Token @relation(fields: [tokenId], references: [id])
  tokenId Int

  botChannels    String[]
  modRoles       String[]
  linkedChannels Link[]
}

model Link {
  id Int @id @default(autoincrement())

  verified Boolean @default(false)
  enabled  Boolean @default(true)

  guild     Guild   @relation(fields: [guildId], references: [id])
  guildId   Int
  channel   Channel @relation(fields: [channelId], references: [id])
  channelId Int

  @@unique([guildId, channelId])
}

model User {
  id Int @id @default(autoincrement())

  discordId String  @unique
  twitchId  String  @unique
  enabled   Boolean @default(true)

  wallets      Wallet[]
  channels     Channel[]
  loveCounters LoveCounter[]
}

model Wallet {
  id Int @id @default(autoincrement())

  amount    Int      @default(0)
  lastAdded DateTime @default(now())
  enabled   Boolean  @default(true)

  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  channel   Channel @relation(fields: [channelId], references: [id])
  channelId Int

  @@unique([userId, channelId])
}

model LoveCounter {
  id Int @id @default(autoincrement())

  counter Int     @default(0)
  enabled Boolean @default(true)

  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  channel   Channel @relation(fields: [channelId], references: [id])
  channelId Int

  @@unique([userId, channelId])
}

model Quote {
  id Int @id @default(autoincrement())

  content   String
  timestamp DateTime @default(now())
  edited    Boolean  @default(false)
  enabled   Boolean  @default(true)

  channel   Channel @relation(fields: [channelId], references: [id])
  channelId Int
}

model Command {
  id Int @id @default(autoincrement())

  channel   Channel @relation(fields: [channelId], references: [id])
  channelId Int

  variables Variable[]
}

model Variable {
  id Int @id @default(autoincrement())

  name  String
  value Int

  command   Command @relation(fields: [commandId], references: [id])
  commandId Int
}

model Suggestion {
  id Int @id @default(autoincrement())

  channel   Channel @relation(fields: [channelId], references: [id])
  channelId Int
}
